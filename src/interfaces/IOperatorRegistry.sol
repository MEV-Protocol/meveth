// SPDX-License-Identifier: MIT

pragma solidity ^0.8.15;

interface IOperatorRegistry {
    /// @dev Node Operator parameters and internal state
    struct Operator {
        bool commited; // a flag indicating if the operator can participate in further staking
        uint64 maxValidators; // the maximum number of validators to stake for this operator
        uint64 validatorsActive; // number of active validators for this operator
    }

    /**
     * @dev Structure for passing information about the validator deposit data.
     * @param operator - address of the operator.
     * @param pubkey - BLS public key of the validator, generated by the operator.
     * @param withdrawal_credentials - withdrawal credentials used for generating the deposit data.
     * @param signature - BLS signature of the validator, generated by the operator.
     * @param deposit_data_root - hash tree root of the deposit data, generated by the operator.
     */
    struct ValidatorData {
        address operator;
        bytes pubkey;
        bytes32 withdrawal_credentials;
        bytes signature;
        bytes32 deposit_data_root; // more efficient to be calculated off-chain
    }

    /**
     * @notice This function is used to register a validator with the contract.
     * @dev The function takes in a ValidatorData calldata depositData as an argument. This data is used to register the validator with the contract.
     */
    function registerValidator(ValidatorData calldata depositData) external;
}
